#! /bin/bash
#=========================================================================
# Copyright (c) 2014, 2015 GemTalk Systems, LLC <dhenrich@gemtalksystems.com>.
#=========================================================================

echo "================="
echo "   GsDevKit script: $(basename $0) $*"
echo "================="

usage() {
  cat <<HELP
USAGE: $(basename $0) [-h] [-f] [-g] [-n] [-s <snapshot-file-path>] [-t] 
                      [-p <tode-project-name> [-b <backup-name>]] 
                      <stone-name> <gemstone-version>

Create a new stone with the given stone name. Do not install tODE. Start stone
and netldi unless -n is specified.

If the -s option is not specified, $GEMSTONE/bin/extent0.seaside.dbf will be used as 
the initial extent.

If you create a stone from an extent snapshot, you should use the -N
option to start the stone, the first time.

If the stone already exists, creation is skipped unless the -f otion is specified,
in which case the stone and netldi are stopped and the existing stone directory removed
before creation.

OPTIONS
  -h
     display help
  -b <backup-name>
     Used in concert with the -p option, make a backup of the stone of the given name
     after the project is installed
  -f
     Force creation of new stone, by deleting 
     $GS_HOME/gemstone/stone/<stone-name> directory if it exists
  -g 
     Do not install tODE in stone ... use initial extent unaltered
  -n
     No startStone, no startNetldi.
  -p <tode-project-name>
     install <tode-project-name> into stone. tODE must already be installed via
     -t or -s options.
  -s <snapshot-file-path> 
     path to snapshot file used to create stone.
  -t
     install tODE in stone after creation (DEFAULT)

EXAMPLES
  $(basename $0) -h
  $(basename $0) -g gs_3281 3.2.8.1
  $(basename $0) gs_3281 3.2.8.1
  $(basename $0) -f gs_3281 3.2.8.1
  $(basename $0) -g -s $GS_HOME/gemstone/snapshots/extent0.tode.3.2.4.dbf gs_324 3.2.4

HELP
}

set -e # exit on error
if [ "${GS_HOME}x" = "x" ] ; then
  echo "the GS_HOME environment variable needs to be defined"; exit 1
fi
source ${GS_HOME}/bin/defGsDevKit.env
if [ "${GS_GEMSTONE}x" = "x" ] ; then
  echo "the GsDevKit_gemstone project has not been installed correctly or the"
  echo "GS_GEMSTONE environment variable has not been defined"
  exit 1
fi

snapshotFileArg=""
noRestartArg=""
force=""
installTode="true"
todeProjectName=""
while getopts "b:fhnp:s:" OPT ; do
  case "$OPT" in
    h) usage; exit 0;;
    b) backupName="${OPTARG}";;
    f) force="true";; 
    g) installTode="false";;
    n) noRestartArg=" -n ";;
    p) todeProjectName="${OPTARG}";;
    s) snapshotFileArg=" -s ${OPTARG} ";;
    t) installTode="true";;
    *) usage; exit 1;;
  esac
done
shift $(($OPTIND - 1))

if [ $# -ne 2 ]; then
  usage; exit 1
fi
stoneName="$1"
gsvers="$2"

if [ ! -e ${GS_GSDEV}/gsDevKit.image ] ; then
  $GS_GEMSTONE/bin/createGsDevKitImage
fi

if [ -d $GS_GEMSTONE/stones/$stoneName ] ; then
  if [ "${force}x" = "x" ] ; then
    echo "stone $stoneName already exists. Use the -f option to force re-creation"
    exit 0 
  else
    $GS_GEMSTONE/bin/deleteStone $stoneName
  fi
fi

echo "Creating stone $stoneName"

$GS_GEMSTONE/bin/downloadGemStone $gsvers
${GS_GSDEV}/pharo ${GS_GSDEV}/gsDevKit.image createStone $stoneName $gsvers

$GS_GEMSTONE/bin/newStoneExtent $noRestartArg $snapshotFileArg $stoneName

if [ "${noRestartArg}x" = "x" ] ; then
  $GS_HOME/bin/startNetldi $stoneName
fi

if [ "$installTode" = "true" ] ; then
  $GS_GEMSTONE/bin/installTode $stoneName
fi

if [ "$todeProjectName" != "" ] ; then
  $GS_GEMSTONE/bin/tode todeIt $stoneName << EOF
project load ${todeProjectName}
bu backup ${backupName}.dbf
EOF
fi

echo "...finished $(basename $0)"
